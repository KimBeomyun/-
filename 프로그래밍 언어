프로그래밍 언어의 정의
 컴퓨터와 의사 소통하기 위한 표현법(약간 부적절 한 면 존재)
 1940년대 이전 : 프로그래밍이 전선 연결(프로그래밍 언어 ?)
 1940년대 Non Nenmann 방식(Program stored computer)
  CPU가 처리할 작업을 명령 코드로 작성
  프로그래밍 개념 시작
  어셈블리 언어 탄생 : symbol 사용
    기계종속적
    저급 수준의 추상화
    읽고 쓰기 어려움
  고급 수준의 추사오하 요구 : 고급 언어 등장
    프로그램 간략, 이해 용이, 이식성 증가
    배정, 반복, 선택 개념
프로그래밍 언어의 정의는 기계가 읽을 수 있고, 사람이 읽을 수 있는 형식으로 계산을 기술하는 표현 체계이다.
프로그래밍 언어란 무엇인가?
 계산(computation)이란?
  -수학적으로 형식적인 정의 가능(Turing Machine 등)
  -컴퓨터가 처리할 수 있는 작업을 의미(일반적으론)
 기계가 읽을 수 있는(Machine - readable)
  -효과적인 번역 가능(간결한 구조의 언어 요구)
  -단순 번역 알고리즘 존재
  -제한된 시간 내에 번역 가능(프로그램 크기 단순 비례 이상적 임)
  -문맥 자유 언어(context free language) -> 위 조건들 만족
 사람이 읽을 수 있는(human-readable)
  -기계 독립적인 추상성 제공 -> 자연어 형태
  -프로그램 대형화 -> 판독성은 새로운 국면 -> 지역성 요구
  -프로그래밍 언어 -> 소프트웨어 개발 환경에 포함되는 경향
프로그래밍 언어 고찰
 -언어의 특징들에 대한 기본 개념
 -특징들의 구현과 이 때 발생하는 문제점
 -특징들의 설계에 대한 기본 개념
 -실제 언어의 도입 예 : 비교 분석
프로그래밍 언어에서의 추상화
 -추상화 개념: 주어진 작업이나 객체를 속성들의 일부분을 가지고 필요한 만큼 묘사할 수 있는 방법을 지원하는것
              필수적인 속성만으로 주어진 것을 묘사하므로 나머지 속성들은 추상화, 은닉 또는 삭제됨
 추상화 범주
  자료 추상화: 문자열, 수 ,tree 같은 계산될 자료의 특성을 추상화
  제어 추상화: 실행 순서를 제어하는 특성을 추상화 EX)반복문, 조건문, 프로시저 호출 등등
